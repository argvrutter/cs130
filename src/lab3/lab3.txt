//COSC130 Calculator Lab
const int SERIAL_BAUD = 115200;

int Mul(short left, short right);
int Add(int left, int right);
int Sub(int left, int right);
short Div(short dividend, short divisor, int &remainder);
int Two(int left);


void setup() {
  // put your setup code here, to run once:
  Serial.begin(SERIAL_BAUD);
}

void loop() {
  // put your main code here, to run repeatedly:
  int opl;
  char op;
  int opr;
  int result;
  int remainder;
  
  if (Serial.available() > 0) {
    String input = Serial.readString();
    sscanf(input.c_str(), "%d %c %d", &opl, &op, &opr);
    switch (op) {
      case 'x':
        result = Mul(opl, opr);
        break;
      case '+':
        result = Add(opl, opr);
        break;
      case '-':
        result = Sub(opl, opr);
        break;
      case '/':
        Serial.print(opl);
        Serial.print(" ");
        Serial.print(op);
        Serial.print(" ");
        Serial.print(opr);
        Serial.print(" = " );
        Serial.print(Div(opl, opr, remainder));
        Serial.print(" R ");
        Serial.println(remainder);
        return;
      default:
        Serial.println("Usage:  left op right\n");
        Serial.println("Where op is:");
        Serial.println(" + - Add\n - - Subtract\n x - Multiply\n / - Divide");
        return;
    }
    Serial.print(opl);
    Serial.print(" ");
    Serial.print(op);
    Serial.print(" ");
    Serial.print(opr);
    Serial.print(" = " );
    Serial.println(result);
  }
}
//Write the functions Mul, Add, Sub, Div, and Two below
/*
 * Multiplies left and right, adds a bunch of times.
 */
int Mul(short left, short right)
{
  bool neg = false;
  int sum = 0;
  //checking signs
  if(left & (1 << 15))
  {
    left = Two(left);
    neg = !neg;
  }
  if(right & (1 << 15))
  {
    right = Two(right);
    neg = !neg;
  }
  //multiplication is just adding the left term right times.
  for(int i=0; i<right; i++)
  {
    sum = Add(sum, left);
  }
  if(neg)
  {
    sum = Two(sum);
  }
  return sum;
}
/*
 * Add together left and right only using logical statements. No if statements.
 */
int Add(int left, int right)
{
  //initialization
  int sum, carry=0, new_sum;
  //repeat as long as carry not 0
  sum = left ^ right;
  carry = left & right;
  
  while(carry !=0)
  {
    carry = (carry << 1);
    new_sum = sum ^ carry;
    carry = sum & carry;
    sum = new_sum;
  }
  return sum;
}
/*
 * Takes two parameters and subtracts them. Just adds a two's complement.
 */
int Sub(int left, int right)
{
  right = Two(right);
  return Add(left,right);
}
/*
 * Divides n cheese(write later)
 */
short Div(short dividend, short divisor, int &remainder)
{
  //init, shift divisor 16 times, need 32 bits
  bool neg=false;

  if(dividend & (1 << 15))
  {
    dividend = Two(dividend);
    neg = !neg;
  }
  if(divisor & (1 << 15))
  {
    divisor = Two(divisor);
    neg = !neg;
  }

  int idiv = divisor << 16;
  short quotient, num=1;
  remainder = dividend;
  
  //implement restoring division algorithim
  // 17 iterations
  for(int i=0; i<17; i++)
  {
    remainder = Sub(remainder, idiv);
    if(remainder >= 0)
    {
      quotient = (quotient << 1);
      quotient = (quotient ^ num);//is 
    }
    else
    {
      remainder = Add(idiv, remainder);
      quotient = (quotient << 1);
    }
    idiv = (idiv >> 1);
  }
  if(!neg)
  {
    return quotient;
  }
  else
  {
    return Two(quotient);
  }
  
  
}
/*
 * Returns the twos complement of the parameter. Only logical operators
 */
int Two(int left)
{
  left = ~left; 
  left = Add(left,1);
  return left;
}
